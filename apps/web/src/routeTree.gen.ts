/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as appRecipesAuthorRkeyImport } from './routes/(app)/recipes/$author/$rkey'

// Create Virtual Routes

const appIndexLazyImport = createFileRoute('/(app)/')()
const authLoginLazyImport = createFileRoute('/(auth)/login')()

// Create/Update Routes

const appIndexLazyRoute = appIndexLazyImport
  .update({
    id: '/(app)/',
    path: '/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/index.lazy').then((d) => d.Route))

const authLoginLazyRoute = authLoginLazyImport
  .update({
    id: '/(auth)/login',
    path: '/login',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))

const appRecipesAuthorRkeyRoute = appRecipesAuthorRkeyImport.update({
  id: '/(app)/recipes/$author/$rkey',
  path: '/recipes/$author/$rkey',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/recipes/$author/$rkey': {
      id: '/(app)/recipes/$author/$rkey'
      path: '/recipes/$author/$rkey'
      fullPath: '/recipes/$author/$rkey'
      preLoaderRoute: typeof appRecipesAuthorRkeyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/login': typeof authLoginLazyRoute
  '/': typeof appIndexLazyRoute
  '/recipes/$author/$rkey': typeof appRecipesAuthorRkeyRoute
}

export interface FileRoutesByTo {
  '/login': typeof authLoginLazyRoute
  '/': typeof appIndexLazyRoute
  '/recipes/$author/$rkey': typeof appRecipesAuthorRkeyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(app)/': typeof appIndexLazyRoute
  '/(app)/recipes/$author/$rkey': typeof appRecipesAuthorRkeyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/' | '/recipes/$author/$rkey'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/recipes/$author/$rkey'
  id: '__root__' | '/(auth)/login' | '/(app)/' | '/(app)/recipes/$author/$rkey'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authLoginLazyRoute: typeof authLoginLazyRoute
  appIndexLazyRoute: typeof appIndexLazyRoute
  appRecipesAuthorRkeyRoute: typeof appRecipesAuthorRkeyRoute
}

const rootRouteChildren: RootRouteChildren = {
  authLoginLazyRoute: authLoginLazyRoute,
  appIndexLazyRoute: appIndexLazyRoute,
  appRecipesAuthorRkeyRoute: appRecipesAuthorRkeyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)/login",
        "/(app)/",
        "/(app)/recipes/$author/$rkey"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.lazy.tsx"
    },
    "/(app)/": {
      "filePath": "(app)/index.lazy.tsx"
    },
    "/(app)/recipes/$author/$rkey": {
      "filePath": "(app)/recipes/$author/$rkey.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
